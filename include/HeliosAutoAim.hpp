// created by liuhan on 2023/9/15
// Submodule of HeliosRobotSystem
// for more see document: https://swjtuhelios.feishu.cn/docx/MfCsdfRxkoYk3oxWaazcfUpTnih?from=from_copylink
#pragma once

#include <iostream>
#include <memory>
#include <rclcpp/logger.hpp>
#include <rclcpp/node.hpp>

#include "rclcpp/rclcpp.hpp"
#include "tf2_ros/buffer.h"
#include "tf2_ros/transform_broadcaster.h"

#include "helios_rs_interfaces/msg/send_data.hpp"
#include "helios_rs_interfaces/msg/receive_data.hpp"
#include "sensor_msgs/msg/image.hpp"

#include "TraditionalArmorDetector.hpp"
#include "TraditionalEnergyDetector.hpp"
#include "ArmorPredictor.hpp"
#include "EnergyPredictor.hpp"
#include "FireController.hpp"

// auto generated by ros2 generate_parameter_library
// https://github.com/PickNikRobotics/generate_parameter_library
#include "helios_autoaim_parameters.hpp"


namespace helios_cv {

enum Transition {
    NONE,
    CONFIGURE,
    ACTIVATE,
    DEACTIVATE,
    CLEANUP,
    SHUTDOWN,
};

enum State {
    UNCONFIGURED,
    INACTIVE,
    ACTIVE,
    FINALIZED,
    ERROR,
};

class HeliosAutoAim : public rclcpp::Node {
public:
    HeliosAutoAim(const rclcpp::NodeOptions& options);

    State on_configure();

    State on_activate();

    State on_deactivate();

    State on_cleanup();

    State on_shutdown();

    State on_error();
private:
    std::shared_ptr<BaseDetector> detector_;
    std::shared_ptr<BasePredictor> predictor_; 
    std::shared_ptr<BaseFireController> fire_controller_;
    
    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr image_sub_;
    rclcpp::Publisher<helios_rs_interfaces::msg::SendData>::SharedPtr target_data_pub_;

    rclcpp::Node* this_node_;

    std::shared_ptr<helios_autoaim::ParamListener> param_listener_;
    helios_autoaim::Params params_;

    Transition transition_;
    State state_;

    // false is energy, true is armor
    bool last_autoaim_state_;

    /**
     * @brief image call back, main task function of this node
     * 
     * @param msg 
     */
    void image_callback(sensor_msgs::msg::Image::ConstSharedPtr msg);

    rclcpp::Logger logger_ = rclcpp::get_logger("helios_autoaim");
};

} // namespace helios_cv

