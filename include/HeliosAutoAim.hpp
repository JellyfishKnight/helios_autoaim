// created by liuhan on 2023/9/15
// Submodule of HeliosRobotSystem
// for more see document: https://swjtuhelios.feishu.cn/docx/MfCsdfRxkoYk3oxWaazcfUpTnih?from=from_copylink
#pragma once

#include <helios_rs_interfaces/msg/detail/send_data__struct.hpp>
#include <iostream>
#include <memory>
#include <rclcpp/publisher.hpp>
#include <rclcpp/subscription_base.hpp>
#include <rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp>
#include <sensor_msgs/msg/detail/image__struct.hpp>

#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/lifecycle_node.hpp"
#include "tf2_ros/buffer.h"
#include "tf2_ros/transform_broadcaster.h"

#include "helios_rs_interfaces/msg/send_data.hpp"
#include "helios_rs_interfaces/msg/receive_data.hpp"
#include "sensor_msgs/msg/image.hpp"

#include "TraditionalArmorDetector.hpp"
#include "TraditionalEnergyDetector.hpp"
#include "ArmorPredictor.hpp"
#include "EnergyPredictor.hpp"
#include "FireController.hpp"

// auto generated by ros2 generate_parameter_library
// https://github.com/PickNikRobotics/generate_parameter_library
#include "helios_autoaim_parameters.hpp"


namespace helios_cv {
/// LifecycleTalker inheriting from rclcpp_lifecycle::LifecycleNode
/**
 * The lifecycle talker does not like the regular "talker" node
 * inherit from node, but rather from lifecyclenode. This brings
 * in a set of callbacks which are getting invoked depending on
 * the current state of the node.
 * Every lifecycle node has a set of services attached to it
 * which make it controllable from the outside and invoke state
 * changes.
 * Available Services as for Beta1:
 * - <node_name>__get_state
 * - <node_name>__change_state
 * - <node_name>__get_available_states
 * - <node_name>__get_available_transitions
 * Additionally, a publisher for state change notifications is
 * created:
 * - <node_name>__transition_event
 */

class HeliosAutoAim : public rclcpp_lifecycle::LifecycleNode {
public:
    HeliosAutoAim(const rclcpp::NodeOptions & options);

    CallbackReturn on_configure(const rclcpp_lifecycle::State & state) override;

    CallbackReturn on_activate(const rclcpp_lifecycle::State & state) override;

    CallbackReturn on_deactivate(const rclcpp_lifecycle::State & state) override;

    CallbackReturn on_cleanup(const rclcpp_lifecycle::State & state) override;

    CallbackReturn on_shutdown(const rclcpp_lifecycle::State & state) override;

    CallbackReturn on_error(const rclcpp_lifecycle::State & state) override;
private:
    std::shared_ptr<BaseDetector> detector_;
    std::shared_ptr<BasePredictor> predictor_; 
    std::shared_ptr<BaseFireController> fire_controller_;
    
    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr image_sub_;
    rclcpp::Publisher<helios_rs_interfaces::msg::SendData>::SharedPtr target_data_pub_;
    
    std::shared_ptr<helios_autoaim::ParamListener> param_listener_;
    helios_autoaim::Params params_;

    void image_callback(sensor_msgs::msg::Image::ConstSharedPtr msg);
};

} // namespace helios_cv